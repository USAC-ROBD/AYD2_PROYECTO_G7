DROP DATABASE IF EXISTS MONEY_BIN;
CREATE DATABASE MONEY_BIN;
USE MONEY_BIN;


--  Tablas
CREATE TABLE CLIENTE (
    CUI VARCHAR(13) PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    APELLIDO VARCHAR(100) NOT NULL,
    DIRECCION VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(15) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL,
    CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREA VARCHAR(50) DEFAULT 'SYSTEM',
    ACTUALIZACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    ACTUALIZA VARCHAR(50) DEFAULT 'SYSTEM'
);

CREATE TABLE CUENTA (
    ID_CUENTA INT PRIMARY KEY AUTO_INCREMENT,
    CUI VARCHAR(13) NOT NULL,
    NUMERO VARCHAR(20) NOT NULL,
    SALDO DECIMAL(19,2) NOT NULL,
    LIMITE_RETIRO DECIMAL(19,2) NOT NULL,
    CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREA VARCHAR(50) DEFAULT 'SYSTEM',
    ACTUALIZACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    ACTUALIZA VARCHAR(50) DEFAULT 'SYSTEM',
    CONSTRAINT FK_CUENTA_CLIENTE FOREIGN KEY (CUI) REFERENCES CLIENTE(CUI)
);

CREATE TABLE SERVICIO (
    ID_SERVICIO INT PRIMARY KEY AUTO_INCREMENT,
    TIPO CHAR(1) NOT NULL,    -- 1: Agua, 2: Electricidad, 3: Tel√©fono, 4: Internet
    NOMBRE VARCHAR(100) NOT NULL,
    PROVEEDOR VARCHAR(100) NOT NULL,
    MONTO DECIMAL(19,2) NOT NULL,
    CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREA VARCHAR(50) DEFAULT 'SYSTEM',
    ACTUALIZACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    ACTUALIZA VARCHAR(50) DEFAULT 'SYSTEM'
);

CREATE TABLE PRESTAMO (
    ID_PRESTAMO INT PRIMARY KEY AUTO_INCREMENT,
    CUI VARCHAR(13) NOT NULL,
    MONTO DECIMAL(19,2) NOT NULL,
    SALDO DECIMAL(19,2) NOT NULL,
    CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREA VARCHAR(50) DEFAULT 'SYSTEM',
    ACTUALIZACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    ACTUALIZA VARCHAR(50) DEFAULT 'SYSTEM',
    CONSTRAINT FK_PRESTAMO_CLIENTE FOREIGN KEY (CUI) REFERENCES CLIENTE(CUI)
);

CREATE TABLE PAGO (
    ID_PAGO INT PRIMARY KEY AUTO_INCREMENT,
    TIPO CHAR(1) NOT NULL,   -- S: Servicio, P: Prestamo
    MODALIDAD CHAR(1) NOT NULL,  -- E: Efectivo, T: Transferencia
    ID_SERVICIO INT,
    ID_PRESTAMO INT,
    ID_CUENTA INT,
    MONTO DECIMAL(19,2) NOT NULL,
    CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREA VARCHAR(50) DEFAULT 'SYSTEM',
    CONSTRAINT CK_TIPO_PAGO CHECK (TIPO IN ('S', 'P')),     -- S: Servicio, P: Prestamo
    CONSTRAINT CK_MODALIDAD_PAGO CHECK (MODALIDAD IN ('E', 'T')),     -- E: Efectivo, T: Transferencia
    CONSTRAINT FK_PAGO_SERVICIO FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIO(ID_SERVICIO),
    CONSTRAINT FK_PAGO_PRESTAMO FOREIGN KEY (ID_PRESTAMO) REFERENCES PRESTAMO(ID_PRESTAMO),
    CONSTRAINT FK_PAGO_CUENTA FOREIGN KEY (ID_CUENTA) REFERENCES CUENTA(ID_CUENTA),
    CONSTRAINT CK_ID_SERVICIO CHECK (ID_SERVICIO IS NULL AND TIPO = 'P' OR ID_SERVICIO IS NOT NULL AND TIPO = 'S'),
    CONSTRAINT CK_ID_PRESTAMO CHECK (ID_PRESTAMO IS NULL AND TIPO = 'S' OR ID_PRESTAMO IS NOT NULL AND TIPO = 'P'),
    CONSTRAINT CK_ID_CUENTA CHECK (ID_CUENTA IS NULL AND MODALIDAD = 'E' OR ID_CUENTA IS NOT NULL AND MODALIDAD = 'T')
);

CREATE TABLE RETIRO (
    ID_RETIRO INT PRIMARY KEY AUTO_INCREMENT,
    ID_CUENTA INT NOT NULL,
    TIPO CHAR(1) NOT NULL,
    MONTO DECIMAL(19,2) NOT NULL,
    CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREA VARCHAR(50) DEFAULT 'SYSTEM',
    CONSTRAINT FK_RETIRO_CUENTA FOREIGN KEY (ID_CUENTA) REFERENCES CUENTA(ID_CUENTA),
    CONSTRAINT CK_TIPO_RETIRO CHECK (TIPO IN ('C', 'V'))     -- C: Cajero, V: Ventanilla
);

CREATE TABLE DEPOSITO (
    ID_DEPOSITO INT PRIMARY KEY AUTO_INCREMENT,
    ID_CUENTA INT NOT NULL,
    ID_CUENTA_ORIGEN INT,
    TIPO CHAR(1) NOT NULL,
    MONTO DECIMAL(19,2) NOT NULL,
    CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CREA VARCHAR(50) DEFAULT 'SYSTEM',
    CONSTRAINT FK_DEPOSITO_CUENTA FOREIGN KEY (ID_CUENTA) REFERENCES CUENTA(ID_CUENTA),
    CONSTRAINT FK_DEPOSITO_CUENTA_ORIGEN FOREIGN KEY (ID_CUENTA_ORIGEN) REFERENCES CUENTA(ID_CUENTA),
    CONSTRAINT CK_TIPO_DEPOSITO CHECK (TIPO IN ('E', 'T')),     -- E: Efectivo, T: Transferencia
    CONSTRAINT CK_ID_CUENTA_ORIGEN CHECK (ID_CUENTA_ORIGEN IS NULL AND TIPO = 'E' OR ID_CUENTA_ORIGEN IS NOT NULL AND TIPO = 'T')
);


-- Triggers
DELIMITER //
CREATE TRIGGER BI_PAGO BEFORE INSERT ON PAGO
FOR EACH ROW
BEGIN
    IF NEW.TIPO = 'P' AND NEW.ID_PRESTAMO IS NOT NULL THEN
        IF (SELECT SALDO FROM PRESTAMO WHERE ID_PRESTAMO = NEW.ID_PRESTAMO) < NEW.MONTO THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El saldo del prestamo no puede ser menor al monto del pago';
        END IF;
        UPDATE PRESTAMO SET SALDO = SALDO - NEW.MONTO WHERE ID_PRESTAMO = NEW.ID_PRESTAMO;
    END IF;

    IF NEW.MODALIDAD = 'T' AND NEW.ID_CUENTA IS NOT NULL THEN
        IF (SELECT SALDO FROM CUENTA WHERE ID_CUENTA = NEW.ID_CUENTA) < NEW.MONTO THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El saldo de la cuenta no puede ser menor al monto del pago';
        END IF;
        UPDATE CUENTA SET SALDO = SALDO - NEW.MONTO WHERE ID_CUENTA = NEW.ID_CUENTA;
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AD_PAGO AFTER DELETE ON PAGO
FOR EACH ROW
BEGIN
    IF OLD.TIPO = 'P' AND OLD.ID_PRESTAMO IS NOT NULL THEN
        UPDATE PRESTAMO SET SALDO = SALDO + OLD.MONTO WHERE ID_PRESTAMO = OLD.ID_PRESTAMO;
    END IF;

    IF OLD.MODALIDAD = 'T' AND OLD.ID_CUENTA IS NOT NULL THEN
        UPDATE CUENTA SET SALDO = SALDO + OLD.MONTO WHERE ID_CUENTA = OLD.ID_CUENTA;
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER BI_RETIRO BEFORE INSERT ON RETIRO
FOR EACH ROW
BEGIN
    IF (SELECT SALDO FROM CUENTA WHERE ID_CUENTA = NEW.ID_CUENTA) < NEW.MONTO THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El saldo de la cuenta no puede ser menor al monto del retiro';
    END IF;
    UPDATE CUENTA SET SALDO = SALDO - NEW.MONTO WHERE ID_CUENTA = NEW.ID_CUENTA;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AD_RETIRO AFTER DELETE ON RETIRO
FOR EACH ROW
BEGIN
    UPDATE CUENTA SET SALDO = SALDO + OLD.MONTO WHERE ID_CUENTA = OLD.ID_CUENTA;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER BI_DEPOSITO BEFORE INSERT ON DEPOSITO
FOR EACH ROW
BEGIN
    IF NEW.TIPO = 'T' AND NEW.ID_CUENTA_ORIGEN IS NOT NULL THEN
        IF (SELECT SALDO FROM CUENTA WHERE ID_CUENTA = NEW.ID_CUENTA_ORIGEN) < NEW.MONTO THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El saldo de la cuenta de origen no puede ser menor al monto de la transferencia';
        END IF;
        UPDATE CUENTA SET SALDO = SALDO - NEW.MONTO WHERE ID_CUENTA = NEW.ID_CUENTA_ORIGEN;
    END IF;
    UPDATE CUENTA SET SALDO = SALDO + NEW.MONTO WHERE ID_CUENTA = NEW.ID_CUENTA;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AD_DEPOSITO AFTER DELETE ON DEPOSITO
FOR EACH ROW
BEGIN
    IF OLD.TIPO = 'T' AND OLD.ID_CUENTA_ORIGEN IS NOT NULL THEN
        UPDATE CUENTA SET SALDO = SALDO + OLD.MONTO WHERE ID_CUENTA = OLD.ID_CUENTA_ORIGEN;
    END IF;
    UPDATE CUENTA SET SALDO = SALDO - OLD.MONTO WHERE ID_CUENTA = OLD.ID_CUENTA;
END//